1) When would you want to use a remote repository rather than keeping all your work
local?

A) When we want to push our local files to the gitHub repository we will create and use remote repository. 

2) Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A) Pulling changes manually gives full control to us on when to import certain changes to our project rather than pulling automatically.
Where automatic pulling may result in importing unwanted or unintentional data to our project.

3) Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

A) Forks are nothing but clones of a github repository into our gitHub repository whereas cloning means taking a copy of the gitHub repo to the local drive or taking a copy of the local files.
Branches acts as a holder to the commit history.

* We use Forks when we want to clone another repo from the gitHub to our account on the gitHub.
* We use clone when we want to take a copy of the files or project from the gitHub to our local machine.
* We use branches to hold specific commit history of a project.  

4) What is the benefit of having a copy of the last known state of the remote
stored locally?

A) Having a copy of the last known state of the remote stored locally will make it easier to compare to the gitHub repo offline thereby we can known
if our project is above, below or in sync with the github version. So, that we can always keep our gitHub updated.

* Git log or the history of the local remote can be accessed by the origin/master [i.e remote/branch] rather than simple git log cmd. 

5) How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

A) Without Git, maintaining version control is pretty much harder because it might involve transferring huge files of data over electronically like through email.
Which incase will not save any history of the file.
* The only thing that would have been easier is we don't need to know anything about GIT or how it works.

6) When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

A) When we are implementing any new feature or even any major change to our project its better to make a separate branch and make change their rather than making changes to the master,
This way we can ensure that the master branch is safe incase if we want to revert back or else if the feature we are trying to implement is successfull then we can also merge that feature with the master branch.
